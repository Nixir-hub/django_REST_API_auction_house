# System Aukcyjny - API REST

## Opis
System aukcyjny zbudowany w oparciu o Django REST Framework, umożliwiający użytkownikom tworzenie aukcji i licytowanie przedmiotów.

## Funkcjonalności
- Tworzenie i zarządzanie aukcjami
- System licytacji
- Historia ofert
- Automatyczne zamykanie aukcji
- Wyłanianie zwycięzcy aukcji

## Wymagania techniczne
- Python 3.9+
- PostgreSQL
- Pozostałe zależności w pliku requirements.txt

## Instalacja
1. Sklonuj repozytorium:
```bash
git clone [adres-repo]
```
1. Utwórz i aktywuj wirtualne środowisko:
``` bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows
```
1. Zainstaluj zależności:
``` bash
pip install -r requirements.txt
```
1. Utwórz plik .env i skonfiguruj zmienne środowiskowe:
```
DEBUG=True
SECRET_KEY=twoj-tajny-klucz
DATABASE_URL=postgresql://user:password@localhost:5432/auctions
```
1. Wykonaj migracje:
``` bash
python manage.py migrate
```
1. Uruchom serwer deweloperski:
``` bash
python manage.py runserver
```
## Struktura projektu
```
auctions/
├── auctions/           # Główna aplikacja
│   ├── models.py       # Modele danych
│   ├── serializers.py  # Serializatory DRF
│   ├── views.py        # Widoki API
│   └── tests/          # Testy
├── manage.py
└── requirements.txt
```
## API Endpoints
- `POST /api/auctions/` - Tworzenie nowej aukcji
- `GET /api/auctions/` - Lista wszystkich aukcji
- `GET /api/auctions/{id}/` - Szczegóły aukcji
- `POST /api/bids/` - Składanie oferty
- `GET /api/bids/` - Historia ofert

## Testy
Uruchomienie testów:
``` bash
pytest
```
Sprawdzenie pokrycia testami:
``` bash
coverage run -m pytest
coverage report
```
## Kontrybucja
1. Utwórz fork repozytorium
2. Utwórz branch z nową funkcjonalnością
3. Wykonaj commit zmian
4. Wyślij pull request

## Licencja
MIT
## Autor
Ernest Zduńczyk
## Status projektu
W aktywnym rozwoju
```

Powyższe pliki zawierają:

**requirements.txt:**
- Podstawowe zależności potrzebne do uruchomienia projektu Django z REST framework
- Narzędzia do testowania (pytest, coverage)
- Narzędzia do formatowania kodu (black, flake8)
- Dodatkowe użyteczne biblioteki (drf-spectacular, django-filter)

**README.md:**
- Pełny opis projektu i jego funkcjonalności
- Instrukcje instalacji i konfiguracji
- Opis struktury projektu
- Dokumentację API
- Instrukcje dotyczące testów
- Informacje o kontrybucji i licencji

Należy uzupełnić:
1. Adres repozytorium w instrukcji klonowania
2. Dokładne dane autora/zespołu
3. Szczegółowe informacje o licencji jeśli różni się od MIT
4. Ewentualne dodatkowe wymagania specyficzne dla projektu
```
